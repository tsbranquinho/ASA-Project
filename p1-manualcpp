#include <iostream>
#include <cstring>

using namespace std;

struct Item {
    int length;
    int width;
    int value;
};




int knapsack(Item items[], int n, int spaceLength, int spaceWidth) {
    int dp[spaceLength + 1][spaceWidth + 1];
    memset(dp, 0, sizeof(dp));

    for (int i = 0; i < n; i++) {
        for (int l = 1; l <= spaceLength; l++) {
            for (int w = 1; w <= spaceWidth; w++) {

                if (l >= items[i].length &&  items[i].width <= w) {
                    dp[l][w] = max(dp[l][w], items[i].value + dp[l][w - items[i].width]);
                    
                   
                    dp[l][w] = max(dp[l][w], items[i].value + dp[l - items[i].length][w]);
                    if (l % items[i].length == 0 && w % items[i].width == 0) {
                        dp[l][w] = max(dp[l][w], items[i].value * ((l * w) / (items[i].length * items[i].width)));
                    }
                }
                if (w >= items[i].length &&  items[i].width <= l) {
                    
                    dp[l][w] = max(dp[l][w],dp[l - items[i].width][w]);
                    dp[l][w] = max(dp[l][w], items[i].value + dp[l][w - items[i].length]);

                    if (w % items[i].length == 0 && l % items[i].width == 0) {
                        dp[l][w] = max(dp[l][w], items[i].value * ((l * w) / (items[i].length * items[i].width)));
                    }
                }
            }
        }
    }
    
    return dp[spaceLength][spaceWidth];
}


int main() {
   
    Item items[] = {{2,1,5}};
    int n = 1;
    int spaceLength = 2;
    int spaceWidth = 8;

    int result = knapsack(items, n, spaceLength, spaceWidth);
    
    cout << result << endl;

    return 0;
}